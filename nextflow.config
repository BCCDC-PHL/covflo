manifest {
  name = 'COVFLO'
  author = 'Jessica M Caleta'
  homePage = 'https://github.com/j3551ca/covflo'
  description = 'Phylogenetics in Nextflow'
  mainScript = 'main.nf'
  version = '1.0.2'
}

//paramater-defining functions:
def robust_path(dir) {
  if (dir.toString() =~ /[^\/]$/) {
    work_dir = dir.toString() + '/'
  }
  else {
    work_dir = dir.toString()
  }
    return work_dir
}


//pipeline parameters
params {

//help message
help = null

//version number
version = null

//conda env local cache
conda_cache = null 

//user-defined directory containing config/ & data/ folders
dir = "/path/to/data/"

//absolute path to data with trailing /
work_dir = robust_path(params.dir)

//reference for alignment
ref = "${params.work_dir}config/Ref.gb"

//input sequences
seqs = "${params.work_dir}data/sequences.fasta"

//metadata of input sequences
meta = "${params.work_dir}data/metadata.csv"

//strains that are excluded
drop_strains = "${params.work_dir}config/dropped_strains.txt"

//strains that are included
keep_strains = "${params.work_dir}config/included_strains.txt"

//colors used in final auspice visualization
colors = "${params.work_dir}config/colors.csv"

//latitude and longitudes
lat_long = "${params.work_dir}config/lat_longs.csv"

//details for auspice visualization
auspice = "${params.work_dir}config/auspice_config.json"

//maximum allowable percentage of N in a seq
n_cutoff="0.15"

//clipkit algorithm to use
clip_option="kpic-smart-gap"

//minimum branch length for RAxML 
bl_min=0.0000000001

//precision of rounding for branch length
precision=6

//length of branches to be collapsed
length=0

//timetree coalescent timescale
coalescent="const"

//timetree node date estimates 
date_inference="marginal"

//timetree units of divergence measurement
divergence_units = "mutations"

//timetree clock rate
clock_rate = 0.0008

//timetree standard deviation of clock rate
clock_std_dev = 0.0004

//type of inference
inference="joint"

//R process prob 0.8 previous probs
trans_probs_80 = "${params.work_dir}config/SARS-CoV-2_0.8_TransProbs.txt"

//R process prob 0.8 previous clusters
gen_clusts_80 = "${params.work_dir}config/SARS-CoV-2_0.8_GenomicClusters.txt"

//R process prob 0.9 previous probs
trans_probs_90 = "${params.work_dir}config/SARS-CoV-2_0.9_TransProbs.txt"

//R process prob 0.9 previous clusters
gen_clusts_90 = "${params.work_dir}config/SARS-CoV-2_0.9_GenomicClusters.txt"
}

//seamlessly run pipeline on different execution systems by modifying
//the process section of the config file. ex. AWS, SLURM, sun grid engine:

process {

cpus = 32

withName: percent {
    cpus = 28
}
withName: replace {
    cpus = 28
}
withName: dedup {
    cpus = 28
}
withName: compress {
    cpus = 28
}
withName: fasttree {
    cpus = 32
}
withName: resolve {
    cpus = 32
}
withName: branches {
    cpus = 32
}
withName: round {
    cpus = 32
}
withName: refine {
    cpus = 32
}
withName: clusters {
conda = "${projectDir}/envs/r421.yml"
//"/home/jess.cal/.conda/envs/r421"
}
withName: condense {
conda = "${projectDir}/envs/treecluster.yml"
//"/home/jess.cal/.conda/envs/treecluster"
}

}


profiles {
    conda {
      process.conda = "${projectDir}/envs/nextstrain.yml"
      //"/home/covid19.analysis/.conda/envs/nextstrain"
      conda.useMamba = true
      conda.createTimeout = '1 h'
      if (params.conda_cache) {
         conda.cacheDir = params.conda_cache
       }
     }

    //can add docker here
  }

//html displaying breakdown of time taken to execute workflow
timeline {
  enabled = true
  overwrite = true
  file = "${params.work_dir}reports/covflo_timeline.html"
}

//html of cpu/mem usage
report {
  enabled = true
  overwrite = true
  file = "${params.work_dir}reports/covflo_usage.html"
}

//dag of covflo workflow
dag {
    enabled = true
    overwrite = true
    file = "${params.work_dir}reports/covflo_dag.html"
}
